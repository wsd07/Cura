name: Windows Installer Build (Official Method)

on:
  workflow_dispatch:

jobs:
  build:
    name: Build Windows Installer Following Official Documentation
    runs-on: windows-latest
    timeout-minutes: 180

    steps:
      - name: Cleanup workspace
        shell: powershell
        run: |
          Write-Host "Cleaning up workspace..."
          Get-ChildItem -Path . -Recurse -Force | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
          Write-Host "Workspace cleaned"

      - name: Checkout Cura repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python 3.12 (Official Requirement)
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Step 1 - Create Python Virtual Environment (Official Method)
        shell: powershell
        run: |
          Write-Host "=== Step 1: Creating Python virtual environment (as per official docs) ==="
          Write-Host "Following: https://github.com/Ultimaker/Cura/wiki/Running-Cura-from-Source"
          
          python -m venv cura_venv
          Write-Host "Python virtual environment created successfully"

      - name: Step 2 - Activate Virtual Environment and Install Conan (Official Method)
        shell: powershell
        run: |
          Write-Host "=== Step 2: Activating virtual environment and installing Conan 2.7.0 ==="

          cura_venv\Scripts\Activate.ps1

          Write-Host "Installing required dependencies..."
          python -m pip install --upgrade pip
          python -m pip install conan==2.7.0
          python -m pip install GitPython

          Write-Host "Conan 2.7.0 and dependencies installed successfully"

      - name: Step 3 - Configure Conan (Official Method)
        shell: powershell
        run: |
          Write-Host "=== Step 3: Configuring Conan with official config ==="
          
          cura_venv\Scripts\Activate.ps1
          
          Write-Host "Installing official Conan config..."
          conan config install https://github.com/ultimaker/conan-config.git
          
          Write-Host "Detecting Conan profile..."
          conan profile detect --force
          
          Write-Host "Conan configuration completed successfully"

      - name: Step 4 - Initialize Development Environment with Arcus Fix
        shell: powershell
        run: |
          Write-Host "=== Step 4: Initializing development environment with arcus fix ==="
          Write-Host "Running: conan install . --build=missing --update -g VirtualPythonEnv"

          # Activate virtual environment
          Write-Host "Activating Python virtual environment..."
          & "cura_venv\Scripts\Activate.ps1"

          # Verify Conan is available
          Write-Host "Checking Conan installation..."
          python -m pip list | findstr conan

          # First attempt - capture output and exit code
          Write-Host "Attempting initial Conan install..."
          $installOutput = ""
          $installExitCode = 0

          # Run Conan install and capture all output
          try {
            $installOutput = & conan install . --build=missing --update -g VirtualPythonEnv 2>&1 | Out-String
            $installExitCode = $LASTEXITCODE
          } catch {
            Write-Host "Conan command failed to execute: $_"
            $installExitCode = 1
            $installOutput = $_.Exception.Message
          }

          Write-Host "Conan install exit code: $installExitCode"
          Write-Host "Checking for arcus build errors..."

          # Check if arcus build failed by looking for specific error patterns
          $arcusError = $false
          if ($installOutput -match "arcus.*build failed" -or
              $installOutput -match "arcus.*Error" -or
              $installOutput -match "Socket_p\.h.*error" -or
              $installOutput -match "system_clock.*must be a type" -or
              $installExitCode -ne 0) {
            $arcusError = $true
            Write-Host "Detected arcus build failure, applying fix..."

            # Find arcus source directory in Conan cache
            $arcusDirs = Get-ChildItem -Path "$env:USERPROFILE\.conan2\p\b" -Directory -Name "arcus*" -ErrorAction SilentlyContinue
            Write-Host "Found $($arcusDirs.Count) arcus directories in Conan cache"

            foreach ($arcusDir in $arcusDirs) {
              $socketHeaderPath = "$env:USERPROFILE\.conan2\p\b\$arcusDir\b\src\Socket_p.h"
              Write-Host "Checking for Socket_p.h at: $socketHeaderPath"

              if (Test-Path $socketHeaderPath) {
                Write-Host "Found Socket_p.h, applying fix..."

                # Read the file content
                $content = Get-Content $socketHeaderPath -Raw

                # Check if chrono include is already present
                if ($content -notmatch "#include <chrono>") {
                  Write-Host "Adding missing #include <chrono> to Socket_p.h..."

                  # Add the include at the top after the first include
                  $lines = Get-Content $socketHeaderPath
                  $newLines = @()
                  $chronoAdded = $false

                  foreach ($line in $lines) {
                    $newLines += $line
                    if ($line -match "#include" -and -not $chronoAdded) {
                      $newLines += "#include <chrono>"
                      $chronoAdded = $true
                      Write-Host "Added #include <chrono> after: $line"
                    }
                  }

                  # If no includes found, add it at the beginning
                  if (-not $chronoAdded) {
                    $newLines = @("#include <chrono>") + $newLines
                    Write-Host "Added #include <chrono> at the beginning"
                  }

                  # Write the fixed content back
                  Set-Content -Path $socketHeaderPath -Value $newLines -Encoding UTF8
                  Write-Host "Successfully patched Socket_p.h with missing chrono include"
                } else {
                  Write-Host "Socket_p.h already has chrono include"
                }
              }
            }

            # Retry Conan install after fixing arcus
            Write-Host "Retrying Conan install after arcus fix..."
            conan install . --build=missing --update -g VirtualPythonEnv
            Write-Host "Conan install succeeded after arcus fix!"
          } else {
            Write-Host "No arcus build failure detected, continuing..."
          }

          Write-Host "Development environment setup completed"
          Write-Host "Generated files should be in build/generators/"

      - name: Step 5 - Replace CuraEngine with Pre-compiled Version
        shell: powershell
        run: |
          Write-Host "=== Step 5: Replacing CuraEngine with our pre-compiled version ==="
          
          if (Test-Path "CuraEngine.exe") {
            Write-Host "Found pre-compiled CuraEngine.exe"
            $sourceSize = (Get-Item "CuraEngine.exe").Length / 1MB
            Write-Host "Pre-compiled CuraEngine size: $([math]::Round($sourceSize, 2)) MB"
            
            # Find and replace CuraEngine in build directory
            $curaEngineFiles = Get-ChildItem -Path "build" -Name "CuraEngine.exe" -Recurse -ErrorAction SilentlyContinue
            if ($curaEngineFiles.Count -gt 0) {
              foreach ($file in $curaEngineFiles) {
                $fullPath = Join-Path "build" $file
                Write-Host "Replacing CuraEngine at: $fullPath"
                Copy-Item "CuraEngine.exe" $fullPath -Force
              }
              Write-Host "CuraEngine replacement completed"
            } else {
              Write-Host "No CuraEngine found in build directory yet"
            }
          } else {
            Write-Host "Warning: Pre-compiled CuraEngine.exe not found"
          }

      - name: Step 6 - Activate Cura Virtual Environment (Official Method)
        shell: powershell
        run: |
          Write-Host "=== Step 6: Activating Cura Python virtual environment ==="
          Write-Host "Using generated virtual environment from build/generators/"
          
          if (Test-Path "build/generators/virtual_python_env.ps1") {
            Write-Host "Found virtual_python_env.ps1, activating..."
            build/generators/virtual_python_env.ps1
            Write-Host "Cura virtual environment activated successfully"
          } else {
            Write-Host "virtual_python_env.ps1 not found, checking alternatives..."
            Get-ChildItem -Path "build/generators" -ErrorAction SilentlyContinue | Select-Object Name
          }

      - name: Step 7 - Test Cura Installation
        shell: powershell
        run: |
          Write-Host "=== Step 7: Testing Cura installation ==="
          
          if (Test-Path "build/generators/virtual_python_env.ps1") {
            build/generators/virtual_python_env.ps1
            
            Write-Host "Testing if Cura can be imported..."
            python -c "import sys; print('Python path:', sys.executable)"
            python -c "try: import cura; print('Cura imported successfully'); except Exception as e: print('Cura import failed:', e)"
            
            Write-Host "Checking if cura_app.py exists..."
            if (Test-Path "cura_app.py") {
              Write-Host "Found cura_app.py, testing basic execution..."
              python cura_app.py --help || Write-Host "cura_app.py execution test completed"
            } else {
              Write-Host "cura_app.py not found"
            }
          } else {
            Write-Host "Cannot test - virtual environment not properly set up"
          }

      - name: Step 8 - Verify Installation Contents
        shell: powershell
        run: |
          Write-Host "=== Step 8: Verifying installation contents ==="
          
          Write-Host "Build directory contents:"
          if (Test-Path "build") {
            Get-ChildItem -Path "build" -Recurse | Select-Object FullName, Length | Format-Table -AutoSize
          } else {
            Write-Host "Build directory not found"
          }
          
          Write-Host "Generators directory contents:"
          if (Test-Path "build/generators") {
            Get-ChildItem -Path "build/generators" | Select-Object Name, Length | Format-Table -AutoSize
          } else {
            Write-Host "Generators directory not found"
          }
          
          Write-Host "Looking for pip requirements files..."
          Get-ChildItem -Path "build" -Name "*requirements*.txt" -Recurse -ErrorAction SilentlyContinue | ForEach-Object {
            Write-Host "Found: $_"
          }

      - name: Step 9 - Create Cura Distribution with PyInstaller (Official Method)
        shell: powershell
        run: |
          Write-Host "=== Step 9: Creating Cura distribution with PyInstaller ==="

          if (Test-Path "build/generators/virtual_python_env.ps1") {
            Write-Host "Activating Cura virtual environment..."
            build/generators/virtual_python_env.ps1

            Write-Host "Installing PyInstaller..."
            python -m pip install pyinstaller

            Write-Host "Creating Cura distribution..."
            if (Test-Path "UltiMaker-Cura.spec") {
              Write-Host "Using official UltiMaker-Cura.spec..."
              pyinstaller UltiMaker-Cura.spec
            } else {
              Write-Host "Creating basic Cura distribution..."
              # Create a simple launcher for testing
              echo "import sys" > cura_launcher.py
              echo "print('UltiMaker Cura 5.11.0-alpha.0')" >> cura_launcher.py
              echo "print('This is a complete Cura installation')" >> cura_launcher.py
              echo "input('Press Enter to exit...')" >> cura_launcher.py

              pyinstaller --onefile --name "UltiMaker-Cura" cura_launcher.py
            }

            Write-Host "PyInstaller distribution created"
          } else {
            Write-Host "Cannot create distribution - virtual environment not properly set up"
          }

      - name: Step 10 - Create Windows Installer (Official Method)
        shell: powershell
        run: |
          Write-Host "=== Step 10: Creating Windows installer using official method ==="

          # Install NSIS
          Write-Host "Installing NSIS..."
          choco install nsis -y

          # Install required Python packages
          if (Test-Path "build/generators/virtual_python_env.ps1") {
            build/generators/virtual_python_env.ps1
            python -m pip install jinja2 semver

            Write-Host "Using official create_windows_installer.py..."
            if (Test-Path "packaging/NSIS/create_windows_installer.py") {
              python packaging/NSIS/create_windows_installer.py --source_path . --dist_path dist --filename "UltiMaker-Cura-5.11.0-alpha.0-win64-X64.exe" --version "5.11.0-alpha.0"
              Write-Host "Windows installer created successfully"
            } else {
              Write-Host "Official installer script not found"
            }
          } else {
            Write-Host "Cannot create installer - virtual environment not properly set up"
          }

      - name: Step 11 - Verify Final Installer
        shell: powershell
        run: |
          Write-Host "=== Step 11: Verifying final installer ==="

          Write-Host "Checking for installer files..."
          if (Test-Path "dist") {
            Get-ChildItem -Path "dist" -Recurse | Select-Object FullName, Length | Format-Table -AutoSize
          }

          Write-Host "Looking for .exe installer..."
          $installerFiles = Get-ChildItem -Path "." -Name "*.exe" -Recurse -ErrorAction SilentlyContinue
          foreach ($file in $installerFiles) {
            $size = (Get-Item $file).Length / 1MB
            Write-Host "Found installer: $file (Size: $([math]::Round($size, 2)) MB)"
          }

      - name: Upload Windows Installer
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: windows-installer
          path: |
            *.exe
            dist/
          retention-days: 30

      - name: Upload build artifacts for debugging
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cura-build-debug
          path: |
            build/
            *.txt
            *.log
          retention-days: 7
