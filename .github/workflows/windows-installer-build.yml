name: Windows Installer Build
run-name: Build Windows Installer ${{ inputs.cura_conan_version }} by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      cura_conan_version:
        description: 'Cura Conan Version (leave empty to use latest from conanfile.py)'
        default: ''
        type: string
      package_overrides:
        description: 'List of specific packages to be used (space-separated, e.g., "cura/5.8.0@ultimaker/testing")'
        default: ''
        type: string
      conan_args:
        description: 'Additional Conan arguments'
        default: ''
        required: false
        type: string
      enterprise:
        description: 'Build Cura as an Enterprise edition'
        default: false
        required: true
        type: boolean
      staging:
        description: 'Use staging API'
        default: false
        required: true
        type: boolean
      private_data:
        description: 'Build with private/internal data'
        required: false
        default: false
        type: boolean

permissions:
  contents: read

env:
  # Simplified build without secrets dependency
  SENTRY_TOKEN: ""

jobs:
  windows-installer-build:
    name: Build Windows Installer
    runs-on: windows-2022

    steps:
      - name: Cleanup workspace
        shell: bash
        run: |
          set -e
          find . -mindepth 1 -delete

      - name: Checkout Cura repository
        uses: actions/checkout@v4
        with:
          path: _cura_sources

      - name: Checkout Cura-workflows repository
        uses: actions/checkout@v4
        with:
          repository: wsd07/cura-workflows  # Use your forked version
          path: Cura-workflows
          ref: main

      - name: Setup Python and pip
        uses: actions/setup-python@v5
        id: setup-python
        with:
          update-environment: false
          python-version: '3.13'

      - name: Setup build environment
        shell: powershell
        run: |
          $pythonPath = "${{ steps.setup-python.outputs.python-path }}"
          $pydir = Split-Path -Parent $pythonPath
          $env:PATH += ";$pydir;$pydir/Scripts"
          $pydir | Out-File -FilePath pydir.txt -Encoding utf8
          Write-Host "Installed Python for GitHub in: $pydir"

          python -m pip install -r Cura-workflows/.github/workflows/requirements-runner.txt

          conan profile detect --force
          conan config install https://github.com/wsd07/conan-config.git -a "-b master"

          Write-Host "Conan setup completed"

          # Get package info for version handling
          if (Test-Path "_cura_sources/conanfile.py") {
            conan inspect _cura_sources | Out-File -FilePath package_details.txt -Encoding utf8
            $packageDetails = Get-Content package_details.txt
            $packageName = ($packageDetails | Select-String "^name:" | ForEach-Object { $_.Line.Split(":")[1].Trim() })
            $packageVersion = ($packageDetails | Select-String "^version:" | ForEach-Object { $_.Line.Split(":")[1].Trim() })
            echo "PACKAGE_NAME=$packageName" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
            echo "PACKAGE_VERSION=$packageVersion" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
            Write-Host "Package detected: $packageName version $packageVersion"
          }

      - name: Setup Conan profile
        shell: bash
        run: |
          if [[ -f pydir.txt ]]; then
            pydir=$(cat pydir.txt)
            PATH+=":$pydir:$pydir/Scripts"
          fi

          # Create a simple profile for Windows builds
          echo "Creating Conan profile for Windows build..."
          conan profile detect --force
          conan profile show default

      - name: Install Cura dependencies
        shell: powershell
        run: |
          $pydir = Get-Content pydir.txt
          $env:PATH += ";$pydir;$pydir/Scripts"

          Write-Host "Installing Cura dependencies from local sources..."

          # Build flags
          $enterprise_flag = if ("${{ inputs.enterprise }}" -eq "true") { '-o "cura/*:enterprise=True"' } else { '' }
          $staging_flag = if ("${{ inputs.staging }}" -eq "true") { '-o "cura/*:staging=True"' } else { '' }
          $private_flag = if ("${{ inputs.private_data }}" -eq "true") { '-o "cura/*:internal=True"' } else { '' }

          # Install dependencies for the local Cura project
          $conan_cmd = "conan install _cura_sources --build=missing --output-folder=cura_inst $enterprise_flag $staging_flag $private_flag"

          Write-Host "Executing: $conan_cmd"
          Invoke-Expression $conan_cmd

      - name: Create the Cura distribution with pyinstaller
        id: prepare-distribution
        shell: powershell
        run: |
          $pydir = Get-Content pydir.txt
          $env:PATH += ";$pydir;$pydir/Scripts"

          # Activate conan environment if available
          if (Test-Path "cura_inst\conanrun.bat") {
            cmd /c "cura_inst\conanrun.bat"
          }

          # Create virtual environment for installer
          python -m venv cura_installer_venv
          & "cura_installer_venv\Scripts\Activate.ps1"

          # Install requirements if they exist
          if (Test-Path "cura_inst\packaging\pip_requirements_core_basic.txt") {
            python -m pip install -r cura_inst\packaging\pip_requirements_core_basic.txt --no-warn-script-location
          }
          if (Test-Path "cura_inst\packaging\pip_requirements_core_hashes.txt") {
            python -m pip install -r cura_inst\packaging\pip_requirements_core_hashes.txt --no-warn-script-location
          }
          if (Test-Path "cura_inst\packaging\pip_requirements_installer_basic.txt") {
            python -m pip install -r cura_inst\packaging\pip_requirements_installer_basic.txt --no-warn-script-location
          }

          # Install pyinstaller if not available
          python -m pip install pyinstaller

          # Prepare installer variables
          $enterprise_flag = if ("${{ inputs.enterprise }}" -eq "true") { "--enterprise" } else { "" }
          $internal_flag = if ("${{ inputs.private_data }}" -eq "true") { "--internal" } else { "" }

          python Cura-workflows\runner_scripts\prepare_installer.py --os ${{ runner.os }} --architecture X64 $enterprise_flag $internal_flag --summary-output $env:GITHUB_STEP_SUMMARY --variables-output $env:GITHUB_OUTPUT

          # Run pyinstaller if spec file exists
          if (Test-Path "cura_inst\UltiMaker-Cura.spec") {
            pyinstaller cura_inst\UltiMaker-Cura.spec
          } else {
            Write-Host "Warning: UltiMaker-Cura.spec not found, trying alternative approach..."
            # Try to create a basic spec file or use alternative method
            python -c "import sys; print('Python executable:', sys.executable)"
          }

      # Note: Code signing steps are commented out as they require specific certificates
      # Uncomment and configure these steps if you have code signing certificates
      # - name: Sign the internal executables
      #   working-directory: dist/UltiMaker-Cura
      #   run: |
      #     & signtool sign /v /fd sha256 /tr http://timestamp.sectigo.com /td sha256 /f C:\actions-runner\code_sign.cer /csp "eToken Base Cryptographic Provider" /kc ${{ secrets.WIN_TOKEN_CONTAINER }} "CuraEngine.exe"
      #     & signtool sign /v /fd sha256 /tr http://timestamp.sectigo.com /td sha256 /f C:\actions-runner\code_sign.cer /csp "eToken Base Cryptographic Provider" /kc ${{ secrets.WIN_TOKEN_CONTAINER }} "UltiMaker-Cura.exe"
      #   timeout-minutes: 2

      - name: Workaround (need exact version of msvc redistributables)
        shell: powershell
        run: |
          $MSDIR="C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Redist/MSVC"
          if ( (Get-ChildItem -Path $MSDIR -Exclude "v*").Count -ne 1 ) { 
            throw "(!!!) MULTIPLE MSVC VERSIONS IN '$MSDIR' -- NEED EXACTLY 1 TO SELECT A REDISTRIBUTABLE (!!!)" 
          }
          $MSDIR_R=(Get-ChildItem -Path $MSDIR -Exclude "v*")[0].FullName
          $MSDIR_DLLS=(Get-ChildItem -Path "$MSDIR_R/x64/Microsoft.VC*.CRT")[0].FullName
          Copy-Item "$MSDIR_DLLS/concrt140.dll" "dist/UltiMaker-Cura/."
          Copy-Item "$MSDIR_DLLS/msvcp140.dll" "dist/UltiMaker-Cura/."
          Copy-Item "$MSDIR_DLLS/msvcp140_1.dll" "dist/UltiMaker-Cura/."
          Copy-Item "$MSDIR_DLLS/msvcp140_2.dll" "dist/UltiMaker-Cura/."
          Copy-Item "$MSDIR_DLLS/vcruntime140.dll" "dist/UltiMaker-Cura/."
          Copy-Item "$MSDIR_DLLS/vcruntime140_1.dll" "dist/UltiMaker-Cura/."

      - name: Workaround (some libs linking against python3 instead of python312)
        shell: powershell
        run: |
          Copy-Item "Cura-workflows/python_dll_workaround/*" "dist/UltiMaker-Cura/."

      - name: Clean up unwanted Qt files and folders
        working-directory: dist/UltiMaker-Cura
        shell: powershell
        run: |
          Remove-Item .\* -Include "*assimp*" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item .\* -Include "*qt6charts*" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item .\* -Include "*qt6coap*" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item .\* -Include "*qt6datavis*" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item .\* -Include "*qt6labsani*" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item .\* -Include "*qt6mqtt*" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item .\* -Include "*qt6networkauth*" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item .\* -Include "*quick3d*" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item .\* -Include "*qt6timeline*" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item .\* -Include "*qt6virtualkey*" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item .\* -Include "*waylandcomp*" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item .\* -Include "*qt5compat*" -Recurse -Force -ErrorAction SilentlyContinue

      - name: Create the Windows exe installer
        shell: powershell
        run: |
          $pydir = Get-Content ../pydir.txt
          $env:PATH += ";$pydir;$pydir/Scripts"
          python ..\cura_inst\packaging\NSIS\create_windows_installer.py --source_path ../cura_inst --dist_path . --filename "${{steps.prepare-distribution.outputs.INSTALLER_FILENAME}}.exe" --version "${{ steps.prepare-distribution.outputs.CURA_VERSION_FULL }}"
        working-directory: dist

      # Note: Code signing for installer is commented out
      # - name: Sign the Windows exe installer
      #   run: |
      #     & signtool sign /v /fd sha256 /tr http://timestamp.sectigo.com /td sha256 /f C:\actions-runner\code_sign.cer /csp "eToken Base Cryptographic Provider" /kc ${{ secrets.WIN_TOKEN_CONTAINER }} "${{steps.prepare-distribution.outputs.INSTALLER_FILENAME}}.exe"
      #   working-directory: dist
      #   timeout-minutes: 2

      - name: Upload the installer exe
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{steps.prepare-distribution.outputs.INSTALLER_FILENAME}}-exe
          path: dist/${{steps.prepare-distribution.outputs.INSTALLER_FILENAME}}.exe
          retention-days: 5

      - name: Create the Windows msi installer
        shell: powershell
        run: |
          $pydir = Get-Content ../pydir.txt
          $env:PATH += ";$pydir;$pydir/Scripts"
          python ..\cura_inst\packaging\msi\create_windows_msi.py --source_path ..\cura_inst --dist_path .\UltiMaker-Cura --filename "${{ steps.prepare-distribution.outputs.INSTALLER_FILENAME }}.msi" --name "${{ steps.prepare-distribution.outputs.CURA_APP_NAME }}" --version "${{ steps.prepare-distribution.outputs.CURA_VERSION_FULL }}"
        working-directory: dist

      # Note: Code signing for MSI is commented out
      # - name: Sign the Windows msi installer
      #   run: |
      #     & signtool sign /v /fd sha256 /tr http://timestamp.sectigo.com /td sha256 /f C:\actions-runner\code_sign.cer /csp "eToken Base Cryptographic Provider" /kc ${{ secrets.WIN_TOKEN_CONTAINER }} "${{steps.prepare-distribution.outputs.INSTALLER_FILENAME}}.msi"
      #   working-directory: dist
      #   timeout-minutes: 2

      - name: Upload the installer msi
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{steps.prepare-distribution.outputs.INSTALLER_FILENAME}}-msi
          path: dist/${{steps.prepare-distribution.outputs.INSTALLER_FILENAME}}.msi
          retention-days: 5

      - name: Upload the application exe
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: UltiMaker-Cura-exe
          path: dist/UltiMaker-Cura/UltiMaker-Cura.exe
          retention-days: 5

      - name: Upload the engine exe
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: CuraEngine-exe
          path: dist/UltiMaker-Cura/CuraEngine.exe
          retention-days: 5

      - name: Clean local cache
        if: ${{ always() }}
        shell: powershell
        run: |
          $pydir = Get-Content pydir.txt
          $env:PATH += ";$pydir;$pydir/Scripts"
          conan remove '*' --lru=1w -c
