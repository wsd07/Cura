name: Build and Package Cura Installer (Windows)

on:
  workflow_dispatch:
    inputs:
      cura_version:
        description: 'Cura Version'
        default: '5.11.0-alpha.0'
        required: true
        type: string
      enterprise:
        description: 'Build Enterprise Edition'
        default: false
        required: false
        type: boolean
      staging:
        description: 'Use Staging API'
        default: false
        required: false
        type: boolean

jobs:
  build-windows:
    runs-on: windows-2022

    env:
      CURA_VERSION: ${{ inputs.cura_version }}
      CONAN_USER_HOME: ${{ github.workspace }}\.conan2

    steps:
    - name: 🧾 检出 Cura 源码
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: 🐍 安装 Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: 🛠 设置 MSVC 环境
      uses: microsoft/setup-msbuild@v1.3

    - name: 🛠 设置 Visual Studio 环境
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: 🧪 安装 Python 依赖
      run: |
        python -m pip install --upgrade pip
        pip install conan==2.7.0
        pip install sip==6.5.1

    - name: 📦 缓存 Conan 包
      uses: actions/cache@v3
      with:
        path: ~/.conan2
        key: conan-${{ runner.os }}-${{ hashFiles('**/conanfile.py', '**/conandata.yml') }}
        restore-keys: |
          conan-${{ runner.os }}-

    - name: ⚙️ 配置 Conan
      run: |
        conan config install https://github.com/wsd07/conan-config.git
        conan profile detect --force

    - name: 🔍 验证 Conan 配置
      run: |
        conan profile show
        conan remote list

    - name: 🔃 克隆依赖仓库
      run: |
        git clone https://github.com/wsd07/Uranium.git ../Uranium
        git clone https://github.com/wsd07/CuraEngine.git ../CuraEngine

    - name: 🔗 设置 editable 依赖
      run: |
        conan editable add ../Uranium --name=uranium --version=5.11.0 --user=wsd07 --channel=testing
        conan editable add ../CuraEngine --name=curaengine --version=5.11.0 --user=wsd07 --channel=testing

    - name: 🏗 创建 Conan 虚拟环境
      run: |
        # 使用官方文档推荐的方法创建虚拟环境
        conan install . --build=missing --update -g VirtualPythonEnv -o cura:enterprise=${{ inputs.enterprise }} -o cura:staging=${{ inputs.staging }} -o cura:internal=False

    - name: ✅ 验证虚拟环境创建
      run: |
        if (Test-Path "build\generators\virtual_python_env.ps1") {
          Write-Host "✅ 虚拟环境脚本已创建"
        } else {
          Write-Host "❌ 虚拟环境脚本未找到"
          Write-Host "build/generators 目录内容："
          if (Test-Path "build\generators") {
            Get-ChildItem "build\generators" | ForEach-Object { Write-Host "  - $($_.Name)" }
          } else {
            Write-Host "build/generators 目录不存在"
          }
          exit 1
        }

    - name: 🔨 安装 NSIS
      run: |
        choco install nsis -y
        $nsisPath = "${env:ProgramFiles(x86)}\NSIS"
        echo "$nsisPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: 🔨 使用 PyInstaller 构建可执行文件
      run: |
        # 激活 Conan 创建的虚拟环境
        & "build\generators\virtual_python_env.ps1"

        # 安装 PyInstaller
        python -m pip install --upgrade pip
        pip install pyinstaller==6.3.0

        # 检查 PyInstaller spec 文件
        if (Test-Path "UltiMaker-Cura.spec") {
          Write-Host "✅ PyInstaller spec 文件存在"
        } else {
          Write-Host "❌ PyInstaller spec 文件不存在"
          Write-Host "当前目录内容："
          Get-ChildItem | ForEach-Object { Write-Host "  - $($_.Name)" }
          exit 1
        }

        # 运行 PyInstaller
        pyinstaller UltiMaker-Cura.spec --clean --noconfirm --log-level=INFO

        # 验证可执行文件生成
        if (Test-Path "dist\UltiMaker-Cura\UltiMaker-Cura.exe") {
          $exe_size = (Get-Item "dist\UltiMaker-Cura\UltiMaker-Cura.exe").Length/1MB
          Write-Host "✅ 可执行文件生成成功 (大小: $exe_size MB)"
        } else {
          Write-Host "❌ PyInstaller 未生成可执行文件"
          Write-Host "dist 目录内容："
          if (Test-Path "dist") {
            Get-ChildItem -Recurse "dist" | Select-Object -First 20 | ForEach-Object { Write-Host "  - $($_.FullName)" }
          }
          exit 1
        }

    - name: 📦 创建 Windows 安装程序
      run: |
        # 激活虚拟环境
        & "build\generators\virtual_python_env.ps1"

        # 安装必要的依赖
        pip install jinja2 semver

        # 检查 NSIS 脚本
        $nsis_script = "packaging\NSIS\create_windows_installer.py"
        if (Test-Path $nsis_script) {
          Write-Host "✅ NSIS 脚本存在: $nsis_script"
        } else {
          Write-Host "❌ NSIS 脚本不存在: $nsis_script"
          Write-Host "packaging 目录内容："
          if (Test-Path "packaging") {
            Get-ChildItem -Recurse "packaging" | Select-Object -First 10 | ForEach-Object { Write-Host "  - $($_.FullName)" }
          }
          exit 1
        }

        # 检查 PyInstaller 输出
        if (Test-Path "dist\UltiMaker-Cura") {
          Write-Host "✅ PyInstaller 输出目录存在"
        } else {
          Write-Host "❌ PyInstaller 输出目录不存在"
          exit 1
        }

        # 生成安装程序文件名
        $installer_filename = "UltiMaker-Cura-${{ env.CURA_VERSION }}-Windows-x64.exe"
        Write-Host "生成安装程序: $installer_filename"

        # 执行 NSIS 脚本
        python $nsis_script --source_path . --dist_path dist --filename $installer_filename --version ${{ env.CURA_VERSION }}

        # 检查安装程序是否生成
        if (Test-Path "dist\$installer_filename") {
          $size = (Get-Item "dist\$installer_filename").Length/1MB
          Write-Host "✅ 安装程序生成成功 (大小: $size MB)"
        } else {
          Write-Host "❌ 安装程序未生成"
          Write-Host "dist 目录内容："
          Get-ChildItem "dist" | ForEach-Object { Write-Host "  - $($_.Name)" }
          exit 1
        }

    - name: ☁️ 上传安装包
      uses: actions/upload-artifact@v4
      with:
        name: cura-windows-installer-${{ env.CURA_VERSION }}
        path: dist/UltiMaker-Cura-${{ env.CURA_VERSION }}-Windows-x64.exe
        retention-days: 7
